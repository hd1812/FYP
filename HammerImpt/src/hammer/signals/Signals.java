package hammer.signals;

import java.util.ArrayList;
import java.util.Map.Entry;

import com.rits.cloning.Cloner;

import java.lang.Object;
import hammer.dictionary.impl.Dictionary;

/**
 * @author hao
 * Signals describe the commands generated by inverse model
 * to guide robot to target state
 */
/**
 * @author hao
 *
 */
public class Signals
{

	/**
	 * Null signal object
	 */
	public static Signals KPtr = null;

	/**
	 * Public implementation of signals object
	 */
	private Impl pimpl_;

	public Cloner cloner = new Cloner();

	/**
	 * Constructors
	 */
	public Signals()
	{
		this.pimpl_ = new Impl();
	}

	public Signals(Impl pimpl)
	{
		this.pimpl_ = pimpl;
	}

	/**
	 * @author hao Implementation of signals,
	 */
	private class Impl
	{
		Dictionary<Object>	dictionary_;
		ArrayList<String>	keys_;
		public Impl()
		{
			this.dictionary_ = new Dictionary<Object>();
			this.keys_ = new ArrayList<String>();
		}
	}

	/**
	 * It creates and returns a new instance of signals
	 * 
	 * @return
	 */
	public static Signals make()
	{
		return new Signals();
	}

	// Create a deep copy of current signals
	public Signals clone()
	{
		return cloner.deepClone(this);
	}

	/**
	 * It creates a new signals instance containing a subset of keys
	 * 
	 * @param obj
	 * @param keys
	 * @return
	 */
	public static Signals subset(Signals obj, ArrayList<String> keys)
	{

		Signals newSignals = make();
		obj.pimpl_.dictionary_.subset(keys, newSignals.pimpl_.dictionary_);
		for (Entry<String, Object> entry : newSignals.pimpl_.dictionary_.data.entrySet())
		{
			if (entry.getValue() != null)
			{

			}
			newSignals.pimpl_.keys_.add(entry.getKey());
		}
		return newSignals;
	}

	/**
	 * This function checks the existence of a key value
	 * 
	 * @param key
	 * @return
	 */
	public boolean contains(String key)
	{
		return pimpl_.dictionary_.contains(key);
	}

	/**
	 * It checks whether signals contain any element
	 * 
	 * @param key
	 * @return
	 */
	public boolean empty(String key)
	{
		return pimpl_.dictionary_.empty();
	}

	/**
	 * Get elements from signals
	 * 
	 * @return
	 */
	public ArrayList<String> getKeys()
	{
		return pimpl_.keys_;
	}

	/**
	 * Get element from signal
	 * 
	 * @param key
	 * @return
	 */
	public final Object get(final String key)
	{
		Object result = pimpl_.dictionary_.get(key);
		return result;
	}

	/**
	 * Insert signals
	 * 
	 * @param key
	 * @param value
	 */
	public final void put(String key, Object value)
	{
		pimpl_.dictionary_.put(key, cloner.deepClone(value));
		if(!pimpl_.keys_.contains(key)){
			pimpl_.keys_.add(key);
		}
	}

	/**
	 * Get element from signal
	 * 
	 * @param key
	 * @return
	 */
	private final Object getAny(String key)
	{
		Object result = pimpl_.dictionary_.get(key);
		return result;
	}

	/**
	 * Insert an element into signal
	 * 
	 * @param key
	 * @param value
	 */
	private void putAny(String key, Object value)
	{
		if (!pimpl_.dictionary_.contains(key))
		{
			pimpl_.dictionary_.put(key, value);
			pimpl_.keys_.add(key);
		}
	}
}
